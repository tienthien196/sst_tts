# tts_exam_bot.py
# Tr·ª£ l√Ω AI giao ti·∫øp b·∫±ng gi·ªçng n√≥i 2 chi·ªÅu
# Micro ‚Üí STT ‚Üí Qwen AI ‚Üí TTS ‚Üí Tai nghe

import requests
import json
import os
import time
import random
import tempfile

from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from gtts import gTTS  # Text-to-Speech
import pygame  # Ph√°t √¢m thanh
import speech_recognition as sr  # Speech-to-Text

# Gi·∫£ s·ª≠ b·∫°n ƒë√£ l∆∞u QwenAIChatbot trong file: qwenAI.py
from qwenAI import QwenAIChatbot

console = Console()


class TTSExamBot:
    def __init__(self, auth_token, cookie, model="qwen3-235b-a22b", chat_id=None):
        """
        Kh·ªüi t·∫°o bot AI v·ªõi TTS + STT
        """
        self.chatbot = QwenAIChatbot(auth_token=auth_token, cookie=cookie, model=model, chat_id=chat_id)
        self.console = Console()
        self.setup_audio()

    def setup_audio(self):
        """Kh·ªüi t·∫°o pygame mixer cho TTS"""
        if not pygame.mixer.get_init():
            pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=512)

    def speak(self, text, lang='vi'):
        """
        Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† ph√°t qua tai nghe
        """
        text = text.strip()
        if not text:
            return

        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as f:
            temp_filename = f.name

        try:
            tts = gTTS(text=text, lang=lang, slow=False)
            tts.save(temp_filename)

            if pygame.mixer.music.get_busy():
                pygame.mixer.music.stop()
            pygame.mixer.music.load(temp_filename)
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                time.sleep(0.1)

        except Exception as e:
            self.console.print(f"[red]‚ùå L·ªói TTS: {e}[/]")
        finally:
            try:
                os.unlink(temp_filename)
            except:
                pass

    def listen(self, lang="vi-VN", timeout=5, phrase_time_limit=10):
        """
        Ghi √¢m t·ª´ micro v√† chuy·ªÉn th√†nh text (STT)
        :param lang: Ng√¥n ng·ªØ (vi-VN, en-US, ...)
        :param timeout: Th·ªùi gian ch·ªù √¢m thanh (s)
        :param phrase_time_limit: Th·ªùi gian t·ªëi ƒëa n√≥i 1 l·∫ßn (s)
        :return: text ho·∫∑c None
        """
        recognizer = sr.Recognizer()
        microphone = sr.Microphone()

        with microphone as source:
            console.print("[yellow]üîä ƒêang l·∫Øng nghe... (n√≥i ƒëi!)[/]")
            recognizer.adjust_for_ambient_noise(source)  # T·ª± ƒë·ªông gi·∫£m ·ªìn

            try:
                audio = recognizer.listen(source, timeout=timeout, phrase_time_limit=phrase_time_limit)
                console.print("[green]‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c √¢m thanh, ƒëang x·ª≠ l√Ω...[/]")

                # D√πng Google Web Speech API (mi·ªÖn ph√≠, c·∫ßn internet)
                text = recognizer.recognize_google(audio, language=lang)
                return text.strip()

            except sr.WaitTimeoutError:
                console.print("[orange]‚è∞ H·∫øt th·ªùi gian ch·ªù √¢m thanh.[/]")
            except sr.UnknownValueError:
                console.print("[orange]ü§ñ Kh√¥ng nghe r√µ. B·∫°n n√≥i l·∫°i ƒë∆∞·ª£c kh√¥ng?[/]")
            except sr.RequestError as e:
                console.print(f"[red]‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Google STT: {e}[/]")
            except Exception as e:
                console.print(f"[red]‚ùå L·ªói STT: {e}[/]")

            return None

    def chat_loop(self, max_turns=10):
        """
        B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p h·ªôi tho·∫°i 2 chi·ªÅu b·∫±ng gi·ªçng n√≥i
        """
        self.console.print(Panel("üéôÔ∏è [bold blue]Tr·ª£ l√Ω AI: S·∫µn s√†ng h·ªôi tho·∫°i b·∫±ng gi·ªçng n√≥i![/]", expand=False))
        self.speak("Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI. H√£y n√≥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën.")

        for turn in range(max_turns):
            self.console.print(f"\n[bold cyan]L∆∞·ª£t {turn + 1}/{max_turns}[/]")

            # 1. Nghe ng∆∞·ªùi d√πng n√≥i
            user_text = self.listen(lang="vi-VN")  # C√≥ th·ªÉ ƒë·ªïi th√†nh en-US n·∫øu c·∫ßn
            if not user_text:
                self.speak("T√¥i kh√¥ng nghe r√µ. B·∫°n th·ª≠ l·∫°i nh√©.")
                continue

            self.console.print(Panel(Markdown(f"**B·∫°n:** {user_text}"), border_style="blue"))

            # 2. G·ª≠i ƒë·∫øn AI
            try:
                ai_response = self.chatbot.get_ai_response(user_text)
                self.console.print(Panel(Markdown(f"**AI:** {ai_response}"), border_style="green"))

                # 3. Ph√°t ph·∫£n h·ªìi c·ªßa AI
                self.speak(ai_response, lang='vi')  # C√≥ th·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán ng√¥n ng·ªØ n·∫øu c·∫ßn

            except Exception as e:
                error_msg = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi ngay l√∫c n√†y."
                self.console.print(f"[red]‚ùå L·ªói AI: {e}[/]")
                self.speak(error_msg)

        # K·∫øt th√∫c
        goodbye = "C·∫£m ∆°n b·∫°n ƒë√£ tr√≤ chuy·ªán. T·∫°m bi·ªát!"
        self.console.print(Panel(goodbye, title="üëã K·∫øt th√∫c", border_style="magenta"))
        self.speak(goodbye)

    def start_exam(self, num_questions=5):
        """
        (Gi·ªØ nguy√™n ph·∫ßn ki·ªÉm tra n·∫øu b·∫°n v·∫´n mu·ªën d√πng)
        """
        self.console.print(Panel("üé§ [bold blue]Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ph·∫ßn thi nh·∫≠n th·ª©c![/]", expand=False))
        self.speak("Xin ch√†o! T√¥i l√† gi√°m kh·∫£o AI. H√£y c√πng b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra nh·∫≠n th·ª©c.")

        score = 0

        for i in range(num_questions):
            self.console.print(f"\n[bold cyan]C√¢u h·ªèi {i+1}/{num_questions}[/]")

            # T·∫°o c√¢u h·ªèi
            qa = self.generate_question(difficulty=random.choice(["d·ªÖ", "trung b√¨nh", "kh√≥"]))
            if not qa["question"] or not qa["answer"]:
                self.console.print("[yellow]‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi, b·ªè qua...[/]")
                self.speak("Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi. Chuy·ªÉn sang c√¢u ti·∫øp theo.")
                continue

            self.current_question = qa["question"]

            # Hi·ªÉn th·ªã v√† ƒë·ªçc to
            self.console.print(Panel(Markdown(qa["question"]), title="‚ùì C√¢u h·ªèi", border_style="yellow"))
            self.speak(qa["question"])

            # üëâ Thay th·∫ø nh·∫≠p text b·∫±ng STT
            user_answer = self.listen(lang="vi-VN")
            if not user_answer:
                user_answer = ""

            # ƒê√°nh gi√°
            is_correct = self.evaluate_answer(user_answer, qa["answer"])

            # Ph·∫£n h·ªìi
            if is_correct:
                score += 1
                feedback = "Ch√≠nh x√°c! C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ho√†n to√†n ƒë√∫ng."
                self.console.print("[green]‚úÖ Ch√≠nh x√°c![/]")
            else:
                feedback = f"R·∫•t ti·∫øc, c√¢u tr·∫£ l·ªùi ch∆∞a ƒë√∫ng. ƒê√°p √°n ƒë√∫ng l√†: {qa['answer']}."
                self.console.print(f"[red]‚ùå Sai. ƒê√°p √°n: {qa['answer']}[/]")

            self.console.print(feedback)
            self.speak(feedback)

        # T·ªïng k·∫øt
        final_msg = f"B√†i ki·ªÉm tra k·∫øt th√∫c. B·∫°n ƒë·∫°t {score}/{num_questions} c√¢u ƒë√∫ng."
        self.console.print(Panel(final_msg, title="üéØ K·∫øt qu·∫£", border_style="green", padding=1))
        self.speak(final_msg)
        self.speak("C·∫£m ∆°n b·∫°n ƒë√£ tham gia ph·∫ßn thi nh·∫≠n th·ª©c. H·∫πn g·∫∑p l·∫°i!")

    # C√°c h√†m h·ªó tr·ª£ c≈© (gi·ªØ nguy√™n)
    def generate_question(self, field=None, difficulty="trung b√¨nh"):
        if not field:
            fields = ["khoa h·ªçc", "l·ªãch s·ª≠", "c√¥ng ngh·ªá", "vƒÉn h√≥a", "to√°n h·ªçc", "ƒë·ªãa l√Ω", "sinh h·ªçc", "logic", "ch√≠nh tr·ªã", "kinh t·∫ø"]
            field = random.choice(fields)

        prompt = (
            f"B·∫°n l√† m·ªôt gi√°m kh·∫£o th√¥ng minh. H√£y t·∫°o m·ªôt c√¢u h·ªèi {difficulty} v·ªÅ lƒ©nh v·ª±c {field}, "
            f"k√®m theo ƒë√°p √°n ch√≠nh x√°c. C√¢u h·ªèi ph·∫£i r√µ r√†ng, ph√π h·ª£p v·ªõi ng∆∞·ªùi tr∆∞·ªüng th√†nh.\n\n"
            f"ƒê·ªãnh d·∫°ng:\n"
            f"C√¢u h·ªèi: [n·ªôi dung c√¢u h·ªèi]\n"
            f"ƒê√°p √°n: [ƒë√°p √°n ƒë√∫ng]"
        )
        try:
            response = self.chatbot.get_ai_response(prompt)
            return self.parse_question_answer(response)
        except Exception as e:
            self.console.print(f"[red]L·ªói khi t·∫°o c√¢u h·ªèi: {e}[/]")
            return {"question": "", "answer": ""}

    def parse_question_answer(self, text):
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        question = ""
        answer = ""
        for line in lines:
            if line.startswith(("C√¢u h·ªèi:", "C√¢u h·ªèi")):
                question = line.split(":", 1)[1].strip()
            elif line.startswith(("ƒê√°p √°n:", "ƒê√°p √°n")):
                answer = line.split(":", 1)[1].strip()
        return {"question": question, "answer": answer}

    def evaluate_answer(self, user_answer, correct_answer):
        if not user_answer.strip():
            return False
        prompt = (
            "B·∫°n l√† gi√°m kh·∫£o. H√£y ƒë√°nh gi√° xem c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i c√≥ ƒë√∫ng v·ªõi tinh th·∫ßn ƒë√°p √°n kh√¥ng. "
            "Ch·ªâ tr·∫£ l·ªùi 'ƒë√∫ng' ho·∫∑c 'sai'.\n\n"
            f"C√¢u h·ªèi: {self.current_question}\n"
            f"Ng∆∞·ªùi ch∆°i tr·∫£ l·ªùi: {user_answer}\n"
            f"ƒê√°p √°n ƒë√∫ng: {correct_answer}"
        )
        try:
            result = self.chatbot.get_ai_response(prompt).strip().lower()
            return "ƒë√∫ng" in result
        except:
            return correct_answer.lower() in user_answer.lower()


# === Token v√† ch·∫°y ch∆∞∆°ng tr√¨nh ===
AUTH_TOKEN = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQyMjI4MGU2LTRkNzctNDI2NC05ZmI4LTg1NWYzYTJiMmJmMyIsImxhc3RfcGFzc3dvcmRfY2hhbmdlIjoxNzUwNjYwODczLCJleHAiOjE3NTc1NzMxNzZ9.2cbHLMtwIt84kbJ8PMmVPr1KGkn-cfGYlscfQgb5uHU"
COOKIE = "cna=taRNIL78HkgCATq6MFcYSPOb; _bl_uid=vFmC58044yCjg4cjat9gk3Rss1Iy; visitor_id=ef774ac6e22316d4da1182628e661228; cnaui=422280e6-4d77-4264-9fb8-855f3a2b2bf3; aui=422280e6-4d77-4264-9fb8-855f3a2b2bf3; _gcl_au=1.1.1328138642.1756634692; xlly_s=1; acw_tc=0a03e54a17569683746562363e1e9aeadafd64cacb7e0a689c5172ad72bfab; x-ap=ap-southeast-1; sca=c3703b46; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQyMjI4MGU2LTRkNzctNDI2NC05ZmI4LTg1NWYzYTJiMmJmMyIsImxhc3RfcGFzc3dvcmRfY2hhbmdlIjoxNzUwNjYwODczLCJleHAiOjE3NTc1NzMxNzZ9.2cbHLMtwIt84kbJ8PMmVPr1KGkn-cfGYlscfQgb5uHU; atpsida=662a9635cc123d7e8eddde5d_1756968439_2; tfstk=gRhqkm48lId2YsIWG0FNzsWfJnFYQ5-BifZ_SV0gloqDDfNaSuuNcxgsS5RaqcEcj5YxrlztYs20mdFN_uahsZvxo57u5Dwcn1vOq84EXA10ssXNkboF1stvHVfa15xBABOIkqNTsH9yRm05DP4OICaci_VY5yaNRMRIkqQoeVDZkB_wtyjcnlmgn8juku40S-XDz74bo5f0IsXlquUgs520IT4uJPIGjsXDz4q87rVgjlYzZuUaslmgsUuoQargA_zUnUoxK8wFNe4YxqqPs6SJNRqeyra8qbJaIl0mgCAMWry4xqqymUABU80TQfQO_RgmpcUnmixaXbuoivmHVtZmLPuIQDY1HzwZM7riiBQUqjuZa-H5mt4Ugoyni-7BJqeiUbPjihBKP4r0L7MWenw_gmkLv-vJ2cuzccc4Ei-7fvgSi8oHV_oTQAcbZjxkTg5fXzXJ_fHVjOy0yzrBzUuClKBIZJDCgOBTHYUzAELABOe0yzrBzUWOB-F8zkTvk; isg=BBwcuUSWmJbFwWM1ELvDMuZA7TrOlcC_5yBXavYW74OVQa_PqaTATa23obG5SfgX; ssxmod_itna=CqGxuDnDcD2GlDeKqmq0K3uDek0DRlxBP01Dp6xQ5DODLxnR5GdKRGL+i37FDB7Q04qdKermbtDl2ihYD9xY6HDj4GT+zhBqhCF3nA2RNqRmThxdoMOxrRxYYmew+m2wuniNcFAwN1XheOeDU43DCuGr4eGGf4GwDGoD34DiDDPDbRiDAueD7qDFAWutZnbDm4GWKPDgG3PWHPDjQhb5O=4DGqDnG4G2bgb4DDN4QIDej7rdFPD+G+aTl1Tq8IxKAnEWDBdP9ID3upkXoinIL/SWTRrDzw1Dtuu8cnHOUmnNTa09/DxrBSqZieZ2DQA5WDtA2sQGDW0D3DxZ7DKDGxh4OYG=ls+DoQ7wDDfCiDNz=x2p57xrntBoXrOASo4xtmSiTMY4GlxdiG1Y2tfr10wq+KPihrindGGxlxPQ4DbxxD; ssxmod_itna2=CqGxuDnDcD2GlDeKqmq0K3uDek0DRlxBP01Dp6xQ5DODLxnR5GdKRGL+i37FDB7Q04qdKerm+YDipMw4r3Scq03=5Yahh1dD054EemfhR9hbsOr896FsOi3+zm=uYQqKmE5d6+6KiyzXUWBLni7LNiu=c/Gf0jGG6DuL5mu=e/ALKaut4TDXtgu=S7AvM7mtNNZ62K1agDTx/DMPS9OdDwhrNNujNDT=ZnqBxVci8EBfDEaWWgMPmO7iGOQrq1dr/i9L=ht0NS9TLjCQ0DuUB8k9EUl9N+9QdncOYISPemltMrzgy0m9gzu13HVK0FiK7ADMznGWD4ePxDhxUcM+rEW9sbG+Bq4lRd+pWKDP+w5mRw3nFj0GiGBBTibuS0WWA+lSTLle1mn7nwm/GeEPwBg6lRXC9Gip2WPqY0lDcexA4laMiD8WGa/03=F3vT+3Y6SY8DhP+eD=07CqGQ01GivQpa/pEiuXmBxTqmCuX0niX+hDSaGWzAwNza87PO2etsOM/xl4T4uHaTqHXcPDEUlONj+oxR6bdaiIxlyaERWQDm+x1SERCH79F/Dr7/pE64EZErraH6+KbwVl+by6iqw+e77Aoj+l76jTcaH6nkm1R9P89I7xnEin7rpNOn9QZ9V6mzwT8R3u2AbMWKRWKGeZ6KYGmY4hyQvDxPjRWEwZowgbLAC77WGdG47PuTyCDyG47N/ux7=2hw3pNrq7i503bAZqmSx0DrRjM2N/mbdy/NdDtUiq0NU+x0ACQc3MAfWQBiDrBDD=o8Eed=DTYDFEj0qYr5dY40iGAZwY6wYgXRrmmQWwGQ5pPKieKXxiKEbp4onxzA5b0W+4KxAn3smCB3r44iDD"

if __name__ == "__main__":
    if AUTH_TOKEN == "your_auth_token_here" or COOKIE == "your_cookie_string_here":
        console.print("[red]‚ùå Vui l√≤ng thay th·∫ø AUTH_TOKEN v√† COOKIE b·∫±ng gi√° tr·ªã th·∫≠t![/]")
    else:
        bot = TTSExamBot(auth_token=AUTH_TOKEN, cookie=COOKIE)

        # üéØ Ch·ªçn ch·∫ø ƒë·ªô:
        console.print("[bold]Ch·ªçn ch·∫ø ƒë·ªô:[/]")
        console.print("1. [green]Chat b·∫±ng gi·ªçng n√≥i li√™n t·ª•c (2 chi·ªÅu)[/]")
        console.print("2. [yellow]Thi tr·∫Øc nghi·ªám (d√πng micro)[/]")

        choice = console.input("Nh·∫≠p l·ª±a ch·ªçn (1/2): ").strip()

        if choice == "1":
            bot.chat_loop(max_turns=10)  # Chat 10 l∆∞·ª£t
        elif choice == "2":
            bot.start_exam(num_questions=5)
        else:
            console.print("[red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.[/]")